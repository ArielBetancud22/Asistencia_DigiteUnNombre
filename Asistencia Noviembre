Ejercicios de Py del grupo digite un nombre
#Agregar ejercicios aqui

#############################################################

# Ejercicio Clase POO lecci칩n 13 genernte-empleado POR JURCZYSZYN MARIA CAROLINA

class Empleado:
    def __init__(self, nombre, sueldo):
        self.nombre = nombre
        self.sueldo = sueldo

    def __str__(self):
        return f'Empleado: [Nombre: {self.nombre}, sueldo $ {self.sueldo}]'

    def mostrar_detalles(self):
        return self.__str__()
        
        
        from Empleado import Empleado


class Gerente(Empleado):

    def __init__(self, nombre, sueldo, departamento):
        super().__init__(nombre, sueldo)
        self.departamento = departamento

    def __str__(self):
        return f'Gerente: [Departamento: {self.departamento}] {super().__str__()}'

from Empleado import Empleado
from Gerente import Gerente


def imprimir_detalles(objeto):
    print(objeto)
    print(type(objeto))
    print(objeto.mostrar_detalles())
    if isinstance(objeto, Gerente):
        print(objeto.departamento)


empleado = Empleado('Carlos', 22000)
imprimir_detalles(empleado)

gerente = Gerente('Olga', 100000, 'Administraci칩n')
imprimir_detalles(gerente)

#############################################################

Ejercicio realizado por Luciano Diaz
#Ejercicio 2 Funcion con args * para multiplicar
#Crear una funcion para multiplicar los valores recibidos de tipo numerico utilziando argumentos variables *args como parametro y regresar como resultado la multiplicacion de todos los valores como argumentos

def multiplicar_valores(*numeros):
resultado = 1 # va 1 por que 0 no multiplica
for numero in numeros:
resultado * = numero
retur resultado

print(multiplicar_valores(3, 5, 15)) #De este manera le pasamos los argumentos

#############################################################

Ejercicio Realizado Por Gonzalo Campderros

class FiguraGeometrica:
    def __init__(self, ancho, alto):
        self.ancho = ancho
        self.alto = alto
 
class Color:
   def __init__(self, Color):
       self.color = Color
from color import Color
from test import FiguraGeometrica


class Cuadrado(FiguraGeometrica, Color):
    def __init__(self, lado, color):
        # super.__init__(lado)
        # como realmnete se hace en herencia multiple
        FiguraGeometrica.__init__(self, lado, lado)
        Color.__init__(self, color)

    def calcular_area(self):
        return self.alto * self.ancho
        
from Cuadrado import Cuadrado

cuadrado1= Cuadrado(5, "azul")
print(cuadrado1.ancho)
print(cuadrado1.alto)
print(f"caculo del are del cuadrado: {cuadrado1.calcular_area()}")
        
#####################################################################

Ejercicio realizado por Balladares Florencia.

class MiClase:
    # Variable de clase, este atributo dar치 a cada objeto el mismo valor
    variable_clase = "Esta es una variable de clase"

    def __init__(self, variable_instancia): # La variable de instancia, da diferentes valores
        self.variable_instancia = variable_instancia

    @staticmethod
    def metodo_estatico(): # Metodo estatico, se asocia a la clase
        print(MiClase.variable_clase)

    @classmethod
    def metodo_clase(cls):
        print(cls.variable_clase)

    def metodo_instancia(self):
        self.metodo_clase()
        self.metodo_estatico()
        print(self.variable_clase)
        print(self.variable_instancia)


print(MiClase.variable_clase)
miClase1 = MiClase("Esta es una variable de instancia")
print(miClase1.variable_instancia)
print(miClase1.variable_clase)
miClase2 = MiClase("Esta es otra prueba de variable de instancia")
print(miClase2.variable_instancia)
print(miClase2.variable_clase)

MiClase.variable_clase2 = " Valor de variable de clase 2"
print(MiClase.variable_clase2)
print(miClase1.variable_clase2)
print(miClase2.variable_clase2)

MiClase.metodo_estatico()

MiClase.metodo_clase()
miObjeto1 = MiClase("variable de instancia")
miObjeto1.metodo_clase()
miObjeto1.metodo_instancia()
 
#############################################
Ejercicio realizado por Myriam Nu침ez 
#Ejercicio contador clase 14
 
 class Persona:
    contador_personas = 0 # Variable de clase

    @classmethod
    def generar_siguiente_valor(cls):
        cls.contador_personas += 1
        return cls.contador_personas

    def __init__(self, nombre, edad):
        self.id_persona = Persona.generar_siguiente_valor()
        self.nombre = nombre
        self.edad = edad

    def __str__(self):
        return f"Persona [{self.id_persona} = {self.nombre} {self.edad}]"

persona1 = Persona("Maria", 23)
print(persona1)
persona2 = Persona("Lucas", 25)
print(persona2)
persona3 = Persona("Agustin",22)
print(persona3)
persona4 = Persona("Juana", 27)
print(persona4)
Persona.generar_siguiente_valor()
persona5 = Persona("Natali", 23)
print(persona5)
print(f"Valor contador personas: {Persona.contador_personas}")

